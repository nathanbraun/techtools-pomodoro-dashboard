-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Pomo.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Pomo.InputObject
import Pomo.Interface
import Pomo.Object
import Pomo.Scalar
import Pomo.ScalarCodecs
import Pomo.Union


type alias HealthRequiredArguments =
    { key : String }


health :
    HealthRequiredArguments
    -> SelectionSet decodesTo Pomo.Object.Health
    -> SelectionSet decodesTo RootQuery
health requiredArgs____ object____ =
    Object.selectionForCompositeField "health" [ Argument.required "key" requiredArgs____.key Encode.string ] object____ Basics.identity


type alias PomodoroRequiredArguments =
    { id : Int }


pomodoro :
    PomodoroRequiredArguments
    -> SelectionSet decodesTo Pomo.Object.Pomodoro
    -> SelectionSet (Maybe decodesTo) RootQuery
pomodoro requiredArgs____ object____ =
    Object.selectionForCompositeField "pomodoro" [ Argument.required "id" requiredArgs____.id Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias ProjectOptionalArguments =
    { start_time : OptionalArgument Int
    , end_time : OptionalArgument Int
    }


type alias ProjectRequiredArguments =
    { project : String }


project :
    (ProjectOptionalArguments -> ProjectOptionalArguments)
    -> ProjectRequiredArguments
    -> SelectionSet decodesTo Pomo.Object.Project
    -> SelectionSet decodesTo RootQuery
project fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { start_time = Absent, end_time = Absent }

        optionalArgs____ =
            [ Argument.optional "start_time" filledInOptionals____.start_time Encode.int, Argument.optional "end_time" filledInOptionals____.end_time Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "project" (optionalArgs____ ++ [ Argument.required "project" requiredArgs____.project Encode.string ]) object____ Basics.identity


type alias WorkOptionalArguments =
    { start_time : OptionalArgument Int
    , end_time : OptionalArgument Int
    }


work :
    (WorkOptionalArguments -> WorkOptionalArguments)
    -> SelectionSet decodesTo Pomo.Object.Project
    -> SelectionSet (List decodesTo) RootQuery
work fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { start_time = Absent, end_time = Absent }

        optionalArgs____ =
            [ Argument.optional "start_time" filledInOptionals____.start_time Encode.int, Argument.optional "end_time" filledInOptionals____.end_time Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "work" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ProjectsOptionalArguments =
    { start_time : OptionalArgument Int
    , end_time : OptionalArgument Int
    }


projects :
    (ProjectsOptionalArguments -> ProjectsOptionalArguments)
    -> SelectionSet decodesTo Pomo.Object.Project
    -> SelectionSet (List decodesTo) RootQuery
projects fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { start_time = Absent, end_time = Absent }

        optionalArgs____ =
            [ Argument.optional "start_time" filledInOptionals____.start_time Encode.int, Argument.optional "end_time" filledInOptionals____.end_time Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projects" optionalArgs____ object____ (Basics.identity >> Decode.list)
